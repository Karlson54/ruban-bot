from repository.order_repository import OrderRepository
from repository.catalog_repository import CatalogRepository
from config.bot_config import BotConfig


class OrderService:
    def __init__(self):
        self.order_repo = OrderRepository()
        self.catalog_repo = CatalogRepository()

    def create_order(self, user_id, user_name, item_id):
        item = self.catalog_repo.get_item_by_id(item_id)
        if not item:
            return False, "–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"

        item_id, item_name, _, price = item
        order_id = self.order_repo.create_order(user_id, user_name, item_id, item_name, price)

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º (–≤ —Ä–µ–∞–ª—å–Ω–æ–º—É –±–æ—Ç—ñ)
        # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å

        return True, order_id

    def get_all_orders(self):
        return self.order_repo.get_all_orders()

    def get_user_orders(self, user_id):
        return self.order_repo.get_user_orders(user_id)

    def format_orders_for_admin(self, orders, lang='ua'):
        if not orders:
            return "–°–ø–∏—Å–æ–∫ –∑–∞–º–æ–≤–ª–µ–Ω—å –ø–æ—Ä–æ–∂–Ω—ñ–π."

        formatted_orders = []
        for order in orders:
            order_id, user_id, user_name, item_name, price, status, created_at = order
            formatted_orders.append(
                f"üîñ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id}\n"
                f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user_name} (ID: {user_id})\n"
                f"üì¶ –¢–æ–≤–∞—Ä: {item_name}\n"
                f"üí∞ –¶—ñ–Ω–∞: {price} –≥—Ä–Ω\n"
                f"üìÖ –î–∞—Ç–∞: {created_at}\n"
                f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
            )

        return "\n".join(formatted_orders)

    def format_user_orders(self, orders, lang='ua'):
        if not orders:
            return "–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å."

        formatted_orders = []
        for order in orders:
            order_id, item_name, price, status, created_at = order
            formatted_orders.append(
                f"üîñ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id}\n"
                f"üì¶ –¢–æ–≤–∞—Ä: {item_name}\n"
                f"üí∞ –¶—ñ–Ω–∞: {price} –≥—Ä–Ω\n"
                f"üìÖ –î–∞—Ç–∞: {created_at}\n"
                f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
            )

        return "\n".join(formatted_orders)

    def notify_admins_about_order(self, bot, order_id, user_id, user_name, item_name, price):
        message = (
            f"üîî –ù–û–í–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø #{order_id}\n\n"
            f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user_name} (ID: {user_id})\n"
            f"üì¶ –¢–æ–≤–∞—Ä: {item_name}\n"
            f"üí∞ –¶—ñ–Ω–∞: {price} –≥—Ä–Ω\n"
        )

        for admin_id in BotConfig.ADMIN_IDS:
            try:
                bot.send_message(admin_id, message)
            except Exception as e:
                print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")